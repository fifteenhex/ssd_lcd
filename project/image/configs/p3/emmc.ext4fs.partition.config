ifeq ($(ONEBIN_BOOT_FLASH_TYPE), nor)
	BOOT_IMAGE_LIST = ipl cis ipl_cust uboot
	IMAGE_LIST = boot
	FLASH_TYPE = nor
	FLASH_BLK_SIZE = 0x10000
	FLASH_BLK_CNT = 256
	ENV_TYPE = dualenv
	ENV_CFG = /dev/mtd1 0 0x1000 0x1000 1
	ENV1_CFG = /dev/mtd2 0 0x1000 0x1000 1
	MTDPARTS = "mtdparts=nor0:$(boot$(MTDPART)),$(cis$(SYSTAB))"

else
	BOOT_IMAGE_LIST = ipl ipl_cust uboot
	IMAGE_LIST = cis boot
	FLASH_TYPE = spinand
	FLASH_BLK_SIZE = 0x20000
	FLASH_BLK_CNT = 1024
	ENV_TYPE = dualenv
	ENV_CFG = /dev/mtd2 0 0x1000 0x20000 1
	ENV1_CFG = /dev/mtd3 0 0x1000 0x20000 1
	MTDPARTS = "mtdparts=nand0:$(cis$(MTDPART)),$(boot$(MTDPART)),$(cis$(SYSTAB))"

endif

LINUX_IMAGE_LIST = kernel rootfs misc miservice customer appconfigs
LINUX_FLASH_TYPE = emmc
SYSTEM = signal
BENCH = no
PHY_TEST = no

OTA_IMAGE_LIST = boot kernel misc miservice customer appconfigs

USR_MOUNT_BLOCKS:=misc miservice customer appconfigs

#file size bigger than this need to split
SPLIT_EACH_FILE_SIZE:= 20971520

bootlogocmd = bootlogo 0 0 0 0\;

#image create config
cis$(RESOUCE) = $(IMAGEDIR)/cis.bin
ipl$(RESOUCE) = $(PROJ_ROOT)/board/$(CHIP)/boot/$(FLASH_TYPE)/ipl/IPL.bin
ipl$(MTDPART) = $(ipl$(PATSIZE))(IPL)
ipl_cust$(RESOUCE) = $(PROJ_ROOT)/board/$(CHIP)/boot/$(FLASH_TYPE)/ipl/IPL_CUST.bin
ipl_cust$(MTDPART) = $(ipl_cust$(PATSIZE))(IPL_CUST)
uboot$(RESOUCE) = $(PROJ_ROOT)/board/$(CHIP)/boot/$(LINUX_FLASH_TYPE)/uboot/u-boot_$(FLASH_TYPE).xz.img.bin
uboot$(MTDPART) = $(uboot$(PATSIZE))(UBOOT)
boot$(RESOUCE) = $(IMAGEDIR)/boot.bin

ifeq ($(ONEBIN_BOOT_FLASH_TYPE), nor)

	cis$(DATASIZE) = 0x6000
	cis$(COPIES) = 1
	cis$(PATSIZE) = $(cis$(DATASIZE))
	cis$(BOOTTAB0) = $(ipl$(MTDPART)),$(cis$(PATSIZE))(CIS),$(ipl_cust$(MTDPART)),$(uboot$(MTDPART)),0x1000@$(boot$(PATSIZE))(ENV),0x1000(ENV1)
	cis$(SYSTAB) =

	ipl$(DATASIZE) = $(call alignup, $(call filesize, $(ipl$(RESOUCE))), $(FLASH_PG_SIZE))
	ipl$(COPIES) = 1
	ipl$(PATSIZE) = $(ipl$(DATASIZE))

	ipl_cust$(DATASIZE) = $(call alignup, $(call filesize, $(ipl_cust$(RESOUCE))), $(FLASH_PG_SIZE))
	ipl_cust$(COPIES) = 1
	ipl_cust$(PATSIZE) = $(ipl_cust$(DATASIZE))

	uboot$(DATASIZE) = $(call alignup, $(call filesize, $(uboot$(RESOUCE))), $(FLASH_PG_SIZE))
	uboot$(COPIES) = 1
	uboot$(PATSIZE) = $(uboot$(DATASIZE))

	boot$(PATSIZE) = 0x5E000
	boot$(MTDPART) = $(boot$(PATSIZE))(BOOT0),0x1000(ENV),0x1000(ENV1)
	boot$(OTABLK) = /dev/mtdblock0

else
	cis$(PATSIZE) = $(call multiplyhex, $(FLASH_BLK_SIZE), 10)
	cis$(BOOTTAB0) = $(cis$(PATSIZE))(CIS),$(ipl$(MTDPART)),$(ipl_cust$(MTDPART)),$(uboot$(MTDPART))
	cis$(BOOTTAB1) = $(ipl$(MTDPART)),$(ipl_cust$(MTDPART)),$(uboot$(MTDPART))
	cis$(SYSTAB) = 0x40000(ENV),0x40000(ENV1),$(key_cust$(MTDPART)),-(UBI)
	cis$(MTDPART) = $(cis$(PATSIZE))(CIS)

	ipl$(DATASIZE) = $(FLASH_BLK_SIZE)
	ipl$(COPIES) = 3
	ipl$(PATSIZE) = $(call multiplyhex, $(ipl$(COPIES)), $(ipl$(DATASIZE)))

	ipl_cust$(DATASIZE) = $(FLASH_BLK_SIZE)
	ipl_cust$(COPIES) = 3
	ipl_cust$(PATSIZE) = $(call multiplyhex, $(ipl_cust$(COPIES)), $(ipl_cust$(DATASIZE)))

	#uboot$(DATASIZE) = $(call alignup, $(call filesize, $(uboot$(RESOUCE))), $(FLASH_BLK_SIZE))
	uboot$(DATASIZE) = 0x60000
	uboot$(COPIES) = 1
	uboot$(PATSIZE) = $(call sum, $(uboot$(DATASIZE)) $(call multiplyhex, $(FLASH_BLK_SIZE), 4))
	#UBOOT partition_sz=alignup(uboot_file_size, flash_block_size) + flash_block_size * 4
	#UBOOT partition must have 4 blocks gap for ONE_BIN bad block use after uboot data.

	boot$(PATSIZE) = $(call sum, $(ipl$(PATSIZE)) $(ipl_cust$(PATSIZE)) $(uboot$(PATSIZE)))
	boot$(MTDPART) = $(boot$(PATSIZE))(BOOT0),$(boot$(PATSIZE))(BOOT1)
	boot$(OTABLK) = /dev/mtd0 /dev/mtd1

	wifi24mclkcmd = mw 1f001cc0 11
	wifirstoffcmd = gpio out 8 0
	wifirstoncmd = gpio out 8 1

	key_cust$(PATSIZE) = 0x20000
	key_cust$(MTDPART) = $(key_cust$(PATSIZE))(KEY_CUST)

endif

EMMC_UPGRADE_PARTITION_SIZE_10      := $(shell printf %d $(EMMC_UPGRADE_PARTITION_SIZE))
UPGRADE_FLAG                        := $(shell if [ $(EMMC_UPGRADE_PARTITION_SIZE_10) -gt 0 ]; then echo "true"; else echo "false"; fi)
ifeq ($(UPGRADE_FLAG),true)
    UPGRADE_PART_NAME               :=upgrade
    $(UPGRADE_PART_NAME)SIZE        :=$(EMMC_UPGRADE_PARTITION_SIZE)
    ROOTFS_MOUNT                    :=/dev/mmcblk0p3
    MISC_MOUNT                      :=/dev/mmcblk0p4
    MISERVICES_MOUNT                :=/dev/mmcblk0p5
    CUSTOMER_MOUNT                  :=/dev/mmcblk0p6
    APPCONFIGS_MOUNT                  :=/dev/mmcblk0p7
else
    UPGRADE_PART_NAME               :=
    $(UPGRADE_PART_NAME)SIZE        :=$(EMMC_UPGRADE_PARTITION_SIZE)
    ROOTFS_MOUNT                    :=/dev/mmcblk0p2
    MISC_MOUNT                      :=/dev/mmcblk0p3
    MISERVICES_MOUNT                :=/dev/mmcblk0p4
    CUSTOMER_MOUNT                  :=/dev/mmcblk0p5
    APPCONFIGS_MOUNT                  :=/dev/mmcblk0p6
endif

kernel$(RESOUCE)   = $(PROJ_ROOT)/kbuild/$(KERNEL_VERSION)/arch/arm/boot/uImage.xz
kernel$(PATSIZE)   = 0xA00000
kernel$(OTABLK)   = /dev/mmcblk0p1

rootfs$(RESOUCE)   = $(OUTPUTDIR)/rootfs
rootfs$(FSTYPE)    = ext4
rootfs$(DATASIZE)   = 0x1400000

misc$(RESOUCE)   = $(OUTPUTDIR)/misc
misc$(FSTYPE)    = fwfs
misc$(PATSIZE)   = 0x1400000
misc$(DATASIZE)   = 0x1400000
misc$(MOUNTTG)   = /misc
misc$(MOUNTPT)   = $(MISC_MOUNT)
misc$(OPTIONS)   = rw
misc$(OTABLK)   = /dev/mmcblk0p3

miservice$(RESOUCE)   = $(OUTPUTDIR)/miservice/config
miservice$(FSTYPE)    = ext4
miservice$(PATSIZE)   = 0x11800000
miservice$(DATASIZE)   = 0x1400000
miservice$(MOUNTTG)   = /config
miservice$(MOUNTPT)   = $(MISERVICES_MOUNT)
miservice$(OPTIONS)   = ro
miservice$(OTABLK)   = /dev/mmcblk0p4

customer$(RESOUCE)   = $(OUTPUTDIR)/customer
customer$(FSTYPE)    = ext4
customer$(PATSIZE)   = 0x83300000
customer$(DATASIZE)   = 0x2000000
customer$(MOUNTTG)   = /customer
customer$(MOUNTPT)   = $(CUSTOMER_MOUNT)
customer$(OPTIONS)   = ro
customer$(OTABLK)   = /dev/mmcblk0p5

appconfigs$(RESOUCE)   = $(OUTPUTDIR)/appconfigs
appconfigs$(FSTYPE)    = ext4
appconfigs$(PATSIZE)   = 0xA00000
appconfigs$(DATASIZE)   = 0xA00000
appconfigs$(MOUNTTG)   = /appconfigs
appconfigs$(MOUNTPT)   = $(APPCONFIGS_MOUNT)
appconfigs$(OPTIONS)   = ro
appconfigs$(OTABLK) = /dev/mmcblk0p6

#user partition name and size(byte unit)
KERNEL_A_PAT_NAME 			:= kernela
$(KERNEL_A_PAT_NAME)SIZE 	:= 0xA00000
KERNEL_A_PAT_BOOTENV		:= $(KERNEL_BOOT_ENV)

ROOTFS_A_PAT_NAME 			:= rootfsa
$(ROOTFS_A_PAT_NAME)SIZE 	:= 0xC800000
ROOTFS_A_PAT_BOOTENV 		:= console=ttyS0,115200 root=$(ROOTFS_MOUNT) rootwait rootfstype=ext4 rw init=/linuxrc 

MISC_A_PAT_NAME 			:= misca
$(MISC_A_PAT_NAME)SIZE	 	:= 0x1400000
USER_A_PAT_NAME 			:= usera
$(USER_A_PAT_NAME)SIZE	 	:= 0x11800000
DATA_PAT_NAME 				:= data
$(DATA_PAT_NAME)SIZE 		:= 0x83300000
APPCONFIGS_A_PAT_NAME 			:= appconfigsa
$(APPCONFIGS_A_PAT_NAME)SIZE	 	:= 0xA00000
USER_PART_LIST := $(UPGRADE_PART_NAME) $(KERNEL_A_PAT_NAME) $(ROOTFS_A_PAT_NAME) $(MISC_A_PAT_NAME) $(USER_A_PAT_NAME) $(DATA_PAT_NAME) $(APPCONFIGS_A_PAT_NAME)

EXT4_RESIZE_PAT_LIST := /dev/mmcblk0p4 /dev/mmcblk0p5 /dev/mmcblk0p6
