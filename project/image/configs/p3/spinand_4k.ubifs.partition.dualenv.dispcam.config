BOOT_IMAGE_LIST = ipl ipl_cust uboot
IMAGE_LIST = cis boot kernel rootfs misc miservice customer appconfigs
OTA_IMAGE_LIST = boot kernel misc miservice customer appconfigs
FLASH_TYPE = spinand
FLASH_BLK_SIZE = 0x40000
FLASH_BLK_CNT = 2048
FLASH_PG_SIZE = 0x1000
UBI_MLC_TYPE = 0
PHY_TEST = no
#overwrite CIS(BL0,BL1,UBOOT) PBAs
CIS_PBAs = 0 0 0
CIS_COPIES = 5
USR_MOUNT_BLOCKS:=miservice misc customer appconfigs
ENV_TYPE = dualenv
ENV_CFG = /dev/mtd2 0 0x1000 0x40000 1
ENV1_CFG = /dev/mtd3 0 0x1000 0x40000 1
BLK_PB0_OFFSET = $(shell echo $$[$(cis$(PATSIZE))/$(FLASH_BLK_SIZE)])
BLK_PB1_OFFSET = $(shell echo $$[$(call sum, $(cis$(PATSIZE)) $(boot$(PATSIZE)))/$(FLASH_BLK_SIZE)])

bootlogocmd = bootlogo 0 0 0 0\;

MTDPARTS   = "mtdparts=nand0:$(cis$(MTDPART)),$(boot$(MTDPART)),$(cis$(SYSTAB))"

cis$(RESOUCE) = $(IMAGEDIR)/cis.bin
cis$(PATSIZE) = $(call multiplyhex, $(FLASH_BLK_SIZE), 10)
cis$(BOOTTAB0) = $(cis$(PATSIZE))(CIS),$(ipl$(MTDPART)),$(ipl_cust$(MTDPART)),$(uboot$(MTDPART))
cis$(BOOTTAB1) = $(ipl$(MTDPART)),$(ipl_cust$(MTDPART)),$(uboot$(MTDPART))
cis$(SYSTAB) = 0x80000(ENV),0x80000(ENV1),$(key_cust$(MTDPART)),$(kernel$(MTDPART)),$(rootfs$(MTDPART)),$(misc$(MTDPART)),-(UBI)
cis$(MTDPART) = $(cis$(PATSIZE))(CIS)

ipl$(RESOUCE) = $(PROJ_ROOT)/board/$(CHIP)/boot/$(FLASH_TYPE)/ipl/IPL.bin
ipl$(DATASIZE) = $(FLASH_BLK_SIZE)
ipl$(COPIES) = 3
ipl$(PATSIZE) = $(call multiplyhex, $(ipl$(COPIES)), $(ipl$(DATASIZE)))
ipl$(MTDPART) = $(ipl$(PATSIZE))(IPL)

ipl_cust$(RESOUCE) = $(PROJ_ROOT)/board/$(CHIP)/boot/$(FLASH_TYPE)/ipl/IPL_CUST.bin
ipl_cust$(DATASIZE) = $(FLASH_BLK_SIZE)
ipl_cust$(COPIES) = 3
ipl_cust$(PATSIZE) = $(call multiplyhex, $(ipl_cust$(COPIES)), $(ipl_cust$(DATASIZE)))
ipl_cust$(MTDPART) = $(ipl_cust$(PATSIZE))(IPL_CUST)

uboot$(RESOUCE) = $(PROJ_ROOT)/board/$(CHIP)/boot/$(FLASH_TYPE)/uboot/u-boot_dualenv_$(FLASH_TYPE).xz.img.bin
#uboot$(DATASIZE) = $(call alignup, $(call filesize, $(uboot$(RESOUCE))), $(FLASH_BLK_SIZE))
uboot$(DATASIZE) = 0xC00000
uboot$(COPIES) = 1
uboot$(PATSIZE) = $(call sum, $(uboot$(DATASIZE)) $(call multiplyhex, $(FLASH_BLK_SIZE), 4))
uboot$(MTDPART) =$(uboot$(PATSIZE))(UBOOT)
#UBOOT partition_sz=alignup(uboot_file_size, flash_block_size) + flash_block_size * 4
#UBOOT partition must have 4 blocks gap for ONE_BIN bad block use after uboot data.

boot$(RESOUCE) = $(IMAGEDIR)/boot.bin
boot$(PATSIZE) = $(call sum, $(ipl$(PATSIZE)) $(ipl_cust$(PATSIZE)) $(uboot$(PATSIZE)))
boot$(MTDPART) = $(boot$(PATSIZE))(BOOT0),$(boot$(PATSIZE))(BOOT1)
boot$(OTABLK) = /dev/mtd0 /dev/mtd1

wifi24mclkcmd = mw 1f001cc0 11
wifirstoffcmd = gpio out 8 0
wifirstoncmd = gpio out 8 1

key_cust$(PATSIZE) = 0x40000
key_cust$(MTDPART) = $(key_cust$(PATSIZE))(KEY_CUST)

kernel$(RESOUCE)   = $(PROJ_ROOT)/kbuild/$(KERNEL_VERSION)/arch/arm/boot/uImage.xz
kernel$(PATSIZE)   = 0x500000
kernel$(BOOTENV)   = $(KERNEL_BOOT_ENV)
kernel$(BOOTCMD)   = nand read.e $(KERNELBOOTADDR) KERNEL \$${kernel_file_size}\;
kernel$(BOOTREC)   = nand read.e $(KERNELBOOTADDR) RECOVERY \$${recovery_file_size}\;
kernel$(MTDPART)   = $(kernel$(PATSIZE))(KERNEL),$(kernel$(PATSIZE))(RECOVERY)
kernel$(OTABLK) = /dev/mtd5
kernel$(BLKENV) := kernel_file_size $$(printf 0x%x `stat -c "%s" $(kernel$(RESOUCE))`)\n
kernel$(BLKENV) += recovery_file_size $$(printf 0x%x `stat -c "%s" $(kernel$(RESOUCE))`)

rootfs$(RESOUCE)   = $(OUTPUTDIR)/rootfs
rootfs$(FSTYPE)    = squashfs
rootfs$(PATSIZE)   = 0x600000
rootfs$(BOOTENV)   = ubi.mtd=UBI,$(FLASH_PG_SIZE) root=/dev/mtdblock7 rootfstype=squashfs ro init=/linuxrc
rootfs$(MTDPART)   = $(rootfs$(PATSIZE))(rootfs)

misc$(RESOUCE) = $(OUTPUTDIR)/misc
misc$(PATSIZE) = 0x140000
misc$(FSTYPE) = fwfs
misc$(MOUNTTG) = /misc
misc$(OPTIONS) = rw
misc$(MOUNTPT) = /dev/mtd8
misc$(MTDPART) = $(misc$(PATSIZE))(MISC)
misc$(OTABLK) = /dev/mtd8

miservice$(RESOUCE)   = $(OUTPUTDIR)/miservice/config
miservice$(FSTYPE)    = ubifs
miservice$(PATSIZE)   = 0xC00000
miservice$(MOUNTTG)  = /config
miservice$(MOUNTPT)  = ubi0:miservice
miservice$(OPTIONS)   = rw
miservice$(OTABLK)    = /dev/ubi0_0

customer$(RESOUCE)   = $(OUTPUTDIR)/customer
customer$(FSTYPE)    = ubifs
customer$(PATSIZE)   = 0x5000000
customer$(MOUNTTG)  = /customer
customer$(MOUNTPT)  = ubi0:customer
customer$(OPTIONS)   = rw
customer$(OTABLK)    = /dev/ubi0_1

appconfigs$(RESOUCE)   = $(OUTPUTDIR)/appconfigs
appconfigs$(FSTYPE)    = ubifs
appconfigs$(PATSIZE)   = 0x16680000
appconfigs$(MOUNTTG)  = /appconfigs
appconfigs$(MOUNTPT)  = ubi0:appconfigs
appconfigs$(OPTIONS)   = rw
appconfigs$(OTABLK)    = /dev/ubi0_2
